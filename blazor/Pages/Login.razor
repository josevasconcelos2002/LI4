@page "/login"
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject ILogger<Login> Logger
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

@using blazor.Models


<h3>Autenticação</h3>
<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
    <div>
        <label for="username">Nome de Utilizador:</label>
        <InputText @bind-Value="@loginModel.Username" id="username" />
    </div>
    <div>
        <label for="password">Palavra-passe:</label>
        <InputText @bind-Value="@loginModel.Password" id="password" type="password" />
    </div>
    <button type="submit">Login</button>
</EditForm>
<br>
<button @onclick="GoBack">Voltar</button>


@code {
    private LoginModel loginModel = new LoginModel();
    private HttpClient httpClient;

    protected override void OnInitialized()
    {
        httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7295");
    }

    private async Task HandleLogin()
    {
        var response = await httpClient.PostAsJsonAsync("api/utilizador/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var tokenResponse = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
            await LocalStorage.SetItemAsync("jwt_token", tokenResponse["token"]);
            NavigationManager.NavigateTo("/paginicial");
        }
        else
        {
            Logger.LogError($"{response}");
            NavigationManager.NavigateTo("/loginError");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }
}

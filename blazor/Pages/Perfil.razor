@page "/verPerfil"
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject ILogger<Login> Logger
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using System.IdentityModel.Tokens.Jwt;

@using blazor.Models




<h1>Perfil</h1>

@if (user == null)
{
    <p><em>Carregando detalhes do user...</em></p>
}
else
{
    <div>
        <ul>
            <li>Nome: @user.Nome</li>
            <li>Email: @user.Email</li>
            <li>Nome de Utilizador: @user.Username</li>
            <li>Saldo: @user.Saldo</li>
        </ul>
    </div>

    <button @onclick="AdicionarSaldo">Adicionar Saldo</button>
    <button @onclick="GoBack">Voltar</button>
}






@code {
    private HttpClient httpClient;
    private UtilizadorModel user;
    private IEnumerable<LeilaoModel> leiloes;
    private String nif;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            httpClient = HttpClientFactory.CreateClient();
            httpClient.BaseAddress = new Uri("https://localhost:7295");

            nif = await GetNifFromToken();
            Logger.LogError($"ESTE É O NIF: {nif}");
            
            user = await httpClient.GetFromJsonAsync<UtilizadorModel>($"api/utilizador/{nif}");
            
            // preciso de um método em leilaoController que me dê todos os leilões criados por um utilizador
            //leiloes = await httpClient.GetFromJsonAsync<IEnumerable<LeilaoModel>>("api/leilao/{");


            //NavigationManager.NavigateTo("/paginicial");
        }

        catch (HttpRequestException e)
        {
            Logger.LogError($"Erro ao obter leilões: {e.Message}");
            // Tratamento de erro, como navegação para uma página de erro
        }
    }

    private void NavigateToLeilao(int leilaoId)
    {
        NavigationManager.NavigateTo($"/leilao/{leilaoId}");
    }

    private void AdicionarSaldo()
    {
        NavigationManager.NavigateTo("/adicionarSaldo");

    }

    // Voltar
    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task<string> GetNifFromToken()
    {
        var token = await LocalStorage.GetItemAsync<string>("jwt_token");
        if (string.IsNullOrEmpty(token))
            return null;

        var handler = new JwtSecurityTokenHandler();
        var jsonToken = handler.ReadJwtToken(token);
        var nifClaim = jsonToken.Claims.FirstOrDefault(claim => claim.Type.Equals("Nif", StringComparison.OrdinalIgnoreCase));

        return nifClaim?.Value;
    }

}

@page "/leilaoAdmin/{LeilaoId}"
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject ILogger<Leilao> Logger
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@using blazor.Models


<style>
    body {
        background-color: #f5f5dc; /* Bege claro */
        margin: 0;
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center; /* Centralizar horizontalmente */
        text-align: center; /* Alinha o texto ao centro */
    }

    ul {
        list-style-type: none; /* Remove os marcadores de lista */
        padding: 0;
    }

    li {
        margin-bottom: 10px; /* Espaço entre os itens da lista */
    }

    button {
        background-color: #007BFF; /* Azul */
        color: #fff;
        border: none;
        padding: 10px 20px;
        margin-top: 20px; /* Espaço acima do botão */
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        display: block; /* Ocupa a linha inteira */
        margin: 10px auto; /* Centraliza o botão */
    }

        button:hover {
            background-color: #0056b3; /* Azul mais escuro ao passar o mouse */
        }
</style>

<body>
    <h1>Detalhes do Leilão</h1>
    @if (response == null)
    {
        <p><em>Carregando detalhes do leilão...</em></p>
    }
    else
    {
        <div>
            <ul>
                <li>ID: @response.IdLeilao</li>
                <li>Lance Atual: @response.LicitacaoAtual</li>
                <li>Preço Mínimo: @response.PrecoMinLicitacao</li>
                <li>Status: @response.Estado</li>
                <li>Data de Início: @response.DataInicial</li>
                <li>Data Final: @response.DataFinal</li>
                <li>ID do Criador: @response.CriadorId</li>
                <li>ID do Produto: @response.ProdutoId</li>
            </ul>
        </div>

        <button @onclick="Aprovar">Aprovar</button>
        <button @onclick="Eliminar">Eliminar</button>
        <button @onclick="GoBack">Página Inicial</button>
    }
</body>


@code {
    [Parameter]
    public string LeilaoId { get; set; }

    private HttpClient httpClient;
    private LeilaoModel response;
    private Licitacao licitacao = new Licitacao();
    private Licitacao responseLicitacao = new Licitacao();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            httpClient = HttpClientFactory.CreateClient();
            httpClient.BaseAddress = new Uri("https://localhost:7295");
            response = await httpClient.GetFromJsonAsync<LeilaoModel>($"api/leilao/{LeilaoId}");
        }
        catch (HttpRequestException e) { Logger.LogError($"{e.Message}"); }
    }

    private async Task Aprovar()
    {
        httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7295");
        var nif = await SharedMethods.GetNifFromToken(LocalStorage);

        var responseLicitacao = await httpClient.PostAsJsonAsync($"api/leilao/aprovarLeilao/{LeilaoId}", LeilaoId);
        if (responseLicitacao.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/paginicialAdmin");
        }
        else
        {
            Logger.LogError($"ERRO:{responseLicitacao}");
            NavigationManager.NavigateTo("/aprovarError");

        }

    }

    private async Task Eliminar()
    {
        httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7295");

        // Exclui o leilão e obtém o ID do produto
        var responseLeilao = await httpClient.DeleteAsync($"api/leilao/{LeilaoId}");

        if (responseLeilao.IsSuccessStatusCode)
        {
            // Extrai o ID do produto como uma string e depois converte para int
            var produtoIdString = await responseLeilao.Content.ReadAsStringAsync();
            int produtoId;
            if (int.TryParse(produtoIdString, out produtoId))
            {
                // Agora, exclui o produto usando o ID obtido
                var responseProduto = await httpClient.DeleteAsync($"api/produto/{produtoId}");

                if (responseProduto.IsSuccessStatusCode)
                {
                    NavigationManager.NavigateTo("/paginicialAdmin");
                }
                else
                {
                    // Trata o erro ao tentar excluir o produto
                    NavigationManager.NavigateTo("/erroAoExcluirProduto");
                }
            }
            else
            {
                // Trata o erro na conversão do ID do produto
                NavigationManager.NavigateTo("/erroConversaoIdProduto");
            }
        }
        else
        {
            // Trata o erro ao tentar excluir o leilão
            NavigationManager.NavigateTo("/erroAoExcluirLeilao");
        }
    }




    // falta a cena de eliminar o leilão

    private void GoBack()
    {
        NavigationManager.NavigateTo("/paginicial");
    }
    public class Licitacao
    {
        public decimal Valor { get; set; }
        public int leilao_IdLeilao { get; set; }
        public string user_Nif { get; set; }
        public DateTime dataLicitacao { get; set; }
    }
}


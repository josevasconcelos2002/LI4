@page "/criarLeilao"
@inject IHttpClientFactory HttpClientFactory
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject ILogger<CriarLeilao> Logger


<style>
    body {
        background-color: #f5f5dc; /* Bege claro */
        margin: 0;
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center; /* Centralizar horizontalmente */
        text-align: center; /* Alinha o texto ao centro */
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    input, textarea {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box; /* Garante que padding não aumente o tamanho do input */
    }

    button {
        background-color: #007BFF; /* Azul */
        color: #fff;
        border: none;
        padding: 10px 20px;
        margin-top: 20px; /* Espaço acima do botão */
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        display: block; /* Ocupa a linha inteira */
        margin: 10px auto; /* Centraliza o botão */
    }

        button:hover {
            background-color: #0056b3; /* Azul mais escuro ao passar o mouse */
        }
</style>

<body>
    <h3>Criar Leilão</h3>

    <EditForm Model="@leilaoProdutoModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="nomeProduto">Nome:</label>
            <InputText id="nomeProduto" @bind-Value="leilaoProdutoModel.Produto.Nome" />
        </div>
        <div class="form-group">
            <label for="imagem">Caminho da Imagem:</label>
            <InputText id="imagem" @bind-Value="leilaoProdutoModel.Produto.Imagem" />
        </div>
        <div class="form-group">
            <label for="descricao">Descrição:</label>
            <InputTextArea id="descricao" @bind-Value="leilaoProdutoModel.Produto.Descricao" />
        </div>
        <div class="form-group">
            <label for="numDonos">Número de Donos Anteriores:</label>
            <InputNumber id="numDonos" @bind-Value="leilaoProdutoModel.Produto.NumeroDonos" />
        </div>

        <div class="form-group">
            <label for="precoMinLicitacao">Preço Mínimo de Licitação:</label>
            <InputNumber id="precoMinLicitacao" @bind-Value="leilaoProdutoModel.Leilao.PrecoMinLicitacao" class="form-control" />
        </div>
        <div class="form-group">
            <label for="dataFinal">Data e Hora Final:</label>
            <input type="datetime-local" id="dataFinal"
                   value="@leilaoProdutoModel.Leilao.DataFinal.ToString("yyyy-MM-ddTHH:mm")"
                   @onchange="UpdateDataFinal" />
        </div>

        <button type="submit">Criar Leilão</button>
        <button @onclick="GoBack">Página Inicial</button>
    </EditForm>
</body>


@code {
    private LeilaoProdutoModel leilaoProdutoModel = new LeilaoProdutoModel();
    private HttpClient httpClient;

    private async Task HandleValidSubmit()
    {

        httpClient = HttpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7295");
        var nif = await SharedMethods.GetNifFromToken(LocalStorage);

        var produtoResponse = await httpClient.PostAsJsonAsync("api/produto", leilaoProdutoModel.Produto);
        if (!produtoResponse.IsSuccessStatusCode)
        {
            Logger.LogError($"PRODUTO: {produtoResponse}");
        }

        var produtoCriado = await produtoResponse.Content.ReadFromJsonAsync<Produto>();
        leilaoProdutoModel.Leilao.ProdutoId = produtoCriado.IdProduto; // Definir o ID do produto no leilão
        leilaoProdutoModel.Leilao.CriadorId = nif;

        // Em seguida, criar o leilão

        // Verificação dos dados a serem enviados
        Logger.LogError($"LEILAO produtoId: {leilaoProdutoModel.Leilao.ProdutoId}");
        Logger.LogError($"LEILAO criadorId: {leilaoProdutoModel.Leilao.CriadorId}");
        Logger.LogError($"LEILAO preco: {leilaoProdutoModel.Leilao.PrecoMinLicitacao}");
        Logger.LogError($"LEILAO data: {leilaoProdutoModel.Leilao.DataFinal}");

        var leilaoResponse = await httpClient.PostAsJsonAsync("api/leilao", leilaoProdutoModel.Leilao);
        if (leilaoResponse.IsSuccessStatusCode)
        {
            // Tratamento de sucesso, como redirecionar para outra página
            NavigationManager.NavigateTo("/paginicial");
        }
        else if (leilaoResponse.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            var errorMessage = await leilaoResponse.Content.ReadAsStringAsync();
            Logger.LogError($"AAA:{errorMessage}"); // "Erro de ModelState no método Create"
        }
    }

    private void UpdateDataFinal(ChangeEventArgs e)
    {
        DateTime selectedDateTime = DateTime.Parse(e.Value.ToString());
        leilaoProdutoModel.Leilao.DataFinal = selectedDateTime;
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/paginicial");
    }

    public class LeilaoProdutoModel
    {
        public Produto Produto { get; set; } = new Produto();
        public Leilao Leilao { get; set; } = new Leilao();
    }

    public class Produto
    {
        public int IdProduto { get; set; }
        public string Nome { get; set; }
        public string Imagem { get; set; }
        public string Descricao { get; set; }
        public int NumeroDonos { get; set; }
    }

    public class Leilao
    {
        public int ProdutoId { get; set; }
        public string CriadorId { get; set; }
        public decimal PrecoMinLicitacao { get; set; }
        public DateTime DataFinal { get; set; }
    }

    public class BadRequestResponseModel
    {
        public string Message { get; set; }
        public List<string> ModelStateErrors { get; set; }
    }

}